#Solves quadratics
def simplify(string):
    #remove non valid characters
    valid = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+", "-", ".", "^"]
    result = ""
    resultFinal = ""
    for i in string:
      for j in valid:
        if i == j:
          result += i
    exponent = False
    for i in result:
      if exponent:
        exponent = False
      elif i == "^":
        exponent = True
      else:
        resultFinal += i
    return resultFinal

def checkFloat(num):
    if float(num) % 1 == 0:
        return int(num)
    elif str(num) == num:
        return num
    else:
        return float(num)
        
def negative(b, a):
    #test if the second root can have a -1 factored out
    if (-b < 0 and a < 0) or (-b > 0 and (2 * a == -1)):
        return True
    else:
        return False
        
def simplifyFraction(numerator, denominator):
  negativeNumerator = False
  negativeDenominator = False
  if numerator < 0:
    numerator = -numerator
    negativeNumerator = True
  if denominator < 0:
    denominator = -denominator
    negativeDenominator = True
  for factor in range(int(numerator), 1, -1):
      if (numerator) % factor == 0 and (denominator) % factor == 0:
          numerator = checkFloat(numerator / factor)
          denominator = checkFloat(denominator / factor)
  if negativeNumerator:
    numerator = -numerator
  if negativeDenominator:
    numerator = -numerator
  return (str(checkFloat(numerator)) + "/" + str(checkFloat(denominator)))

def abc(polynomial):
    if polynomial == "":
      return [0, 0, 0, 0]
    parentheses = 0
    x = 0
    for i in polynomial:
        if i =="(" or i == ")":
            parentheses += 1
        elif i == "x":
          x += 1
    if parentheses == 2:
        return vertexToStandard(polynomial)
    #Find a, b, c
    polynomial = simplify(polynomial)
    a = ""
    b = ""
    c = ""
    negativeA = False
    negativeB = False
    negativeC = False
    start = True
    plus = 0
    for i in polynomial:
      if start:
        start = False
        if i == "-":
            negativeA = True
        else:
          a += i
      elif plus == 0:
        if i == "+":
          plus += 1
        elif i == "-":
          plus += 1
          negativeB = True
        else:
          a += i
      elif plus == 1:
        if i == "+":
          plus += 1
        elif i == "-":
          plus += 1
          negativeC = True
        else:
          b += i
      elif plus == 2:
        c += i
    #Convert a, b, c, d, e, and f numbers    
    a = float(a)
    b = float(b)
    c = float(c)
    #Account for negatives
    if negativeA:
        a = -a
    if negativeB:
        b = -b
    if negativeC:
        c = -c
    return [a, b, c, x]
    
def roots(sideA, sideB):
    #Move everything to one side of the equation
    a = sideA[0] - sideB[0]
    b = sideA[1] - sideB[1]
    c = sideA[2] - sideB[2]
    x = sideA[3] + sideB[3]
    if x == 6:
      x = 3
    root3 = 0
    fractions = 0
    radicand = checkFloat((b ** 2) - 4 * a * c)
    #if roots are imaginary
    if radicand < 0:
        radicand = radicand * -1
        coeff = 1
        if radicand != 1 and int(radicand) == radicand:
            #factor out perfect squares from radical
            for factor in range(radicand, 3, -1):
                if (factor ** 0.5) % 1 == 0 and radicand % factor == 0:
                    radicand = int(radicand / factor)
                    coeff = int(coeff * (factor ** 0.5))
        #simplify if denominator is easy decimal 
        for i in decimals:
            if a == i or -a == i:
                a = a / i
                b = b / i
                coeff = coeff / i
        #simplify
        for factor in range(int(coeff), 1, -1):
            if coeff % factor == 0 and (2 * a) % factor == 0 and (b) % factor == 0:
                coeff = (coeff / factor)
                a = float(a / factor)
                b = int(b / factor)
        coeff = checkFloat(coeff)
        root1 = ""
        root2 = ""
        if 2 * a != 1 and 2 * a != -1:
            #only print parenthesis if a isn't 1 or -1
            root1 += "("
            root2 += "("
        radicand = checkFloat(radicand)
        b = checkFloat(b)
        if (2 * a) == -1:
            root1 += str(b) + " - "
        else:
            root1 += str(-b) + " + "
        #if -b and a are negative, factor out -1
        if negative(b, a):
            root2 += str(b) + " + "
        else:
            root2 += str(-b) + " - "
        if coeff != 1:
            root1 += str(coeff)
            root2 += str(coeff)
        root1 += "i"
        root2 += "i"
        if radicand != 1:
            root1 += "(" + str(radicand) + ")^0.5"
            root2 += "(" + str(radicand) + ")^0.5"
        if 2 * a != 1 and 2 * a != -1:
            root1 += ") / " + str(checkFloat(2 * a))
            if negative(b, a):
                #if -b, a, and coeff are negative, factor out -1
                root2 += ") / " + str(checkFloat(-2 * a))
            else:
                root2 += ") / " + str(checkFloat(2 * a))
        print()
        print("\nThe first root is " + str(root1))
        print("The second root is " + str(root2))
        if x == 3:
          print("The third root is 0")
    else:
        #if numbers are real, calculate
        root1 = (-b + (radicand ** 0.5)) / (2 * a)
        root2 = (-b - (radicand ** 0.5)) / (2 * a)

        if root1 % 1 != 0 and 2 * a != 1 and 2 * a != -1:
            fractions += 1
        if root2 % 1 != 0 and 2 * a != 1 and 2 * a != -1:
            fractions += 2
        if fractions == 1 and 2 * a != 1:
            choice = input("One root has a decimal, would you like it \nas a fraction?(yes/no): ")
            if choice.lower() == "yes":
                root1 = simplifyFraction((-b + (radicand ** 0.5)), (2 * a))
        elif fractions == 2:
            choice = input("One root has a decimal, would you like it \nas a fraction?(yes/no): ")
            if choice.lower() == "yes":
                root2 = simplifyFraction((-b - (radicand ** 0.5)), (2 * a))  
        elif fractions == 3:
            choice = input("Both roots have decimals, would you like them \nas fractions?(yes/no): ")
            if choice.lower() == "yes":
                root1 = simplifyFraction((-b + (radicand ** 0.5)), (2 * a))
                root2 = simplifyFraction((-b - (radicand ** 0.5)), (2 * a))  
                
        #Put roots in order from least to greatest
        roots = [[((-b + (radicand ** 0.5)) / (2 * a)), root1], [((-b - (radicand ** 0.5)) / (2 * a)), root2]]
        if x == 3:
          roots.append([0, 0])
        for i in range(len(roots)):
          for j in range(len(roots)):
            if roots[i][0] < roots[j][0]:
              tempRoot = roots[i][0]
              root = roots[i][1]
              roots[i][0] = roots[j][0]
              roots[i][1] = roots[j][1]
              roots[j][0] = tempRoot
              roots[j][1] = root
              
        #Print roots, excluding duplicates
        print()
        print("The first root is ", end="")
        if type(roots[0][1]) != str:
          print(str(checkFloat(roots[0][1])))
        else:
          print(roots[0][1])
        if roots[0][0] != roots[1][0]:
          print("The second root is ", end ="")
          if type(roots[1][1]) != str:
            print(str(checkFloat(roots[1][1])))
          else:
            print(roots[1][1])
          if x == 3:
            if roots[2][0] != roots[0][0] and roots[2][0] != roots[1][0]:
              print("The third root is ", end = "")
              if type(roots[2][1]) != str:
                print(str(checkFloat(roots[2][1])))
              else:
                print(roots[2][1])
        elif x == 3:
          if roots[0][0] != roots[2][0]:
            print("The second root is ", end="")
            if type(roots[2][1]) != str:
              print(str(checkFloat(roots[2][1])))
            else:
              print(roots[2][1])
          else:
            print("There is only one root")
        else:
          print("There is only one root")
          
def vertexToStandard(equation):
    equation = simplify(equation)
    negativeA = False
    negativeH = False
    negativeK = False
    plus = 0
    start = True
    a = ""
    h = ""
    k = ""
    for i in equation:
      if start:
        start = False
        if i == "-":
          negativeA = True
        else:
          a += i
      elif plus == 0:
        if i == "+":
          plus += 1
        elif i == "-":
          plus += 1
          negativeH = True
        else:
          a += i
      elif plus == 1:
        if i == "+":
          plus += 1
        elif i == "-":
          plus += 1
          negativeK = True
        else:
          h += i
      elif plus == 2:
        k += i
    a = float(a)
    h = float(h)
    k = float(k)
    if negativeA:
      a = -a
    if negativeH:
      h = -h
    if negativeK:
      k = -k
    b = 2 * a * h
    c =((h ** 2) * a) + k
    return [a, b, c, 2]
    
#Main
stop = ""
decimals = [0.5, 0.25, 0.2, 0.125, 0.1, 0.0625, 0.05, 0.04, 0.01]
print("ax^2 + bx + c\nax^2 + bx + c = dx^2 + ex + f\na(x - h)^2 + k\na(x - h)^2 + k = a(x - h)^2 + k\nax^2 + bx + c = a(x - h)^2 + k\nax^3 + bx^2 + cx\nax^3 + bx^2 + cx = dx^3 + ex^2 + fx")
while stop.lower() != "no":
    function = input("\nEnter a quadratic\n\n")
    sideA = ""
    sideB = ""
    equal = False
    for i in function:
      if i == "=":
        equal = True
      elif not equal:
        sideA += i
      elif equal:
        sideB += i
    roots(abc(sideA), abc(sideB))
    stop = input("Do you want to enter another?(no to stop): ")
